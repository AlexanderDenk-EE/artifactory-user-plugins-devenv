buildscript {
    repositories {
        maven {
            url = project.hasProperty('artifactory_contextUrl') ? "${artifactory_contextUrl}/jcenter" : 'https://jcenter.bintray.com'
        }
        //mavenLocal()
    }
    //dependencies {
    //    classpath 'de.undercouch:gradle-download-task:1.2'
    //}
}

import de.undercouch.gradle.tasks.download.Download
import groovy.io.FileType
import groovy.json.JsonSlurper
import java.nio.file.Files

plugins {
    //Check the latest version on bintray: https://bintray.com/jfrog/jfrog-jars/build-info-extractor-gradle/view
    id "com.jfrog.artifactory" version "3.1.0"
    id "de.undercouch.download" version "1.2"
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'

version = "$currentVersion"
group = 'org.jfrog.art-plugin-dev'

def etcDir = new File(projectDir, 'etc')
def scriptsDir = new File(projectDir, 'src/scripts')
def installSh = new File(scriptsDir, 'install.sh')
def control = new File(scriptsDir, 'control-art.sh')
def localDir = new File('local-store')
def artDir = new File('artifactory')
def artProZip = new File(localDir, 'artifactory-pro.zip')

def realArtifactoryVersion = artifactoryVersion
if (realArtifactoryVersion == "_latest") {
    def url = new URL("https://api.bintray.com/packages/jfrog/artifactory-pro/artifactory-powerpack-standalone")
    def json = new JsonSlurper().parse(url)
    realArtifactoryVersion = json.latest_version
}

dependencies {
    compile(group: 'org.jfrog.artifactory.client', name: 'artifactory-java-client-services', version: '0.15')
    testCompile(group: 'org.spockframework', name: 'spock-core', version: '0.7-groovy-2.0')
    compile(group: 'org.artifactory', name: 'artifactory-standalone', classifier: 'tests', version: "$realArtifactoryVersion")
}

task downloadArtPro << {
    def updatedUrl = artifactoryDownloadUrl.replaceAll('\\[VERSION]', realArtifactoryVersion)
    println "Downloading $updatedUrl into ${artProZip.getPath()}"
    download {
        src updatedUrl
        dest artProZip
        onlyIfNewer true
        overwrite false
    }
}

idea {
    project {
        ipr {
            withXml { provider ->
                provider.node.component.find({ it.@name == 'VcsDirectoryMappings' }).mapping.@vcs = 'Git'
            }
        }
    }
    module {
        sourceDirs += new File(etcDir, 'plugins')
    }
}

eclipse {
    classpath {
        file {
            withXml {
                it.asNode().appendNode('classpathentry', [kind: "src", path: "etc/plugins"])
            }
        }
    }
}

task prepareArtPro() {
    dependsOn downloadArtPro
    doLast {
        def cmd = "bash ${getPath(installSh)} ${getPath(etcDir)} ${getPath(localDir)} ${getPath(artDir)}"
        execute(cmd)
    }
}

task startArtPro() {
    doLast {
        def cmd = "bash ${getPath(control)} ${getPath(artDir)} start"
        execute(cmd)
    }
}

task stopArtPro() {
    doLast {
        def cmd = "bash ${getPath(control)} ${getPath(artDir)} stop"
        execute(cmd)
    }
}

task restartArtPro() {
    doLast {
        execute("bash ${getPath(control)} ${getPath(artDir)} stop")
        execute("bash ${getPath(control)} ${getPath(artDir)} start")
    }
}

task cleanArtPro() {
    dependsOn stopArtPro
    doLast {
        def cmd = "rm -rf ${getPath(artDir)}"
        execute(cmd)
    }
}

// usage: ./gradlew workOnPlugin -DpluginName=governance/preventUnapproved
// link a plugin and any supplementary files into the dev environment
// usage: ./gradlew workOnPlugin -DpluginName=all
// link all plugins and any supplementary files into the dev environment
task workOnPlugin << {
    if (!System.properties.pluginName)
        throw new InvalidUserDataException('No plugin specified')
    def userPlugins = new File(System.properties.userPluginsDir)
    if (!userPlugins.isDirectory())
        throw new InvalidUserDataException('System property userPluginsDir not a directory')
    if (System.properties.pluginName == 'all') {
        def dir = new File(userPlugins.absolutePath)
        dir.eachFileRecurse(FileType.FILES) { file ->
            if (file.name.endsWith('.groovy') && file.name != 'setup.groovy' && !file.name.endsWith('Test.groovy')) {
                String prefix = "${file.name.minus('.groovy')}"
                String tmp = file.absolutePath.minus("/$file.name")
                String fullPrefix = tmp.minus("$dir.absolutePath/")
                linkPlugin(fullPrefix,prefix, userPlugins)
            }
        }
    } else {
        def prefix = new File(System.properties.pluginName).getName()
        def fullPrefix = System.properties.pluginName
        linkPlugin(fullPrefix,prefix, userPlugins)
    }
}

def linkPlugin(def fullPrefix,def prefix, File userPlugins) {
    def success = true, linked = false;
    def etcDir = new File(projectDir, 'etc')
    def lnPath = new File(etcDir, 'plugins')
    def lnTestPath = new File(projectDir, 'src/test/groovy')
    for (def pluginFile : new File(userPlugins, fullPrefix).listFiles()) {
        def fileName = pluginFile.getName()
        if (fileName.startsWith(prefix + '.')) {
            if (!"ln -s ${pluginFile.getCanonicalPath()} ${lnPath.getPath()}".execute().waitFor()) {
                linked = true;
                logger.quiet "Linked file ${fileName}"
            } else {
                success = false;
                logger.warn "WARN: Failed to link file ${fileName}"
            }
        } else if (fileName == prefix + 'Test.groovy') {
            if (!"ln -s ${pluginFile.getCanonicalPath()} ${lnTestPath.getPath()}".execute().waitFor()) {
                linked = true;
                logger.quiet "Linked test file ${fileName}"
            } else {
                success = false;
                logger.warn "WARN: Failed to link test file ${fileName}"
            }
        } else if (fileName == 'test' && pluginFile.isDirectory()) {
            def lnDest = new File(lnTestPath, prefix + 'Test')
            if (!"ln -s  ${pluginFile.getCanonicalPath()} ${lnDest.getPath()}".execute().waitFor()) {
                linked = true;
                logger.quiet "Linked test directory"
            } else {
                success = false;
                logger.warn "WARN: Failed to link test directory"
            }
        }
    }
    if (success && linked)
        logger.quiet 'Specified plugin successfully added to environment'
    else if (!success)
        logger.warn 'WARN: Warning: Some plugin files could not be added'
    else
        throw new InvalidUserDataException('Specified plugin not found')
    def setupFile = new File(new File(userPlugins, fullPrefix), 'setup.groovy')
    if (setupFile.isFile()) {
        logger.quiet 'Setup file found. Executing ...'
        run(setupFile)
        logger.quiet '... Done'
    }
}

// usage: ./gradlew stopWorkOnPlugin -DpluginName=governance/preventUnapproved
// remove links to a plugin and any supplementary files from the dev environment, and restart artifactory
// usage: ./gradlew stopWorkOnPlugin -DpluginName=all
// remove links to all plugins and any supplementary files from the dev environment, and restart artifactory
task stopWorkOnPlugin << {
    if (!System.properties.pluginName)
        throw new InvalidUserDataException('No plugin specified')
    def success = true, removed = false;
    def prefix = new File(System.properties.pluginName).getName()
    for (def lnPath : new File(etcDir, 'plugins').listFiles()) {
        def lnName = lnPath.getName()
        if ((System.properties.pluginName == 'all' || lnName.startsWith(prefix + '.'))
                && Files.isSymbolicLink(lnPath.toPath())) {
            if (lnPath.delete()) {
                removed = true;
                println "Removed link ${lnName}"
            } else {
                success = false;
                println "Failed to remove link ${lnName}"
            }
        }
    }
    for (def lnPath : new File(projectDir, 'src/test/groovy').listFiles()) {
        def lnName = lnPath.getName()
        if ((System.properties.pluginName == 'all' || lnName == prefix + 'Test.groovy' || lnName == prefix + 'Test')
                && Files.isSymbolicLink(lnPath.toPath())) {
            if (lnPath.delete()) {
                removed = true;
                println "Removed test link ${lnName}"
            } else {
                success = false;
                println "Failed to remove test link ${lnName}"
            }
        }
    }
    if (success && removed)
        println 'All specified plugin links successfully removed from environment'
    else if (!success)
        println 'Warning: Some plugin links could not be removed'
    else if (System.properties.pluginName == 'all')
        throw new InvalidUserDataException('No plugins found in plugins directory')
    else
        throw new InvalidUserDataException('Specified plugin not found in plugins directory')
    println 'Restarting artifactory ...'
    execute("bash ${getPath(control)} ${getPath(artDir)} stop")
    execute("bash ${getPath(control)} ${getPath(artDir)} start")
    println '... Done'
}

artifactory {
    contextUrl = project.hasProperty('artifactory_contextUrl') ? "${artifactory_contextUrl}" : 'https://repo.jfrog.org/artifactory'
    resolve {
        repository {
            repoKey = 'user-plugins'
            maven = true
        }
    }
}

private static String getPath(File file) {
    def res = "/" + file.getAbsolutePath().replace('\\', '/')
    res.replace(':', '')
}

private void execute(GString cmd) {
    logger.info("Executing $cmd")
    def proc = cmd.execute()
    logger.info("launched")

    def builder = new StringBuilder()
    def builderErr = new StringBuilder()
    consumeStream(proc.in, builder, null, true)
    consumeStream(proc.err, builderErr, null, true)
    def res = proc.waitFor()
    if (res != 0) {
        def errors = builderErr.toString()
        logger.error("Error executing got $res ${errors} ${builder.toString()}")
        throw new RuntimeException("Could not run project install due to $errors")
    } else {
        logger.debug("Success executing got:\n${builder.toString()}")
    }
}

public void consumeStream(InputStream stream, StringBuilder outString, File outFile, boolean print) {
    Thread.start {
        Reader reader = new BufferedReader(new InputStreamReader(stream))
        def next
        while ((next = reader.readLine()) != null) {
            if (print) println(next)
            outString?.append(next)?.append("\n")
            if (outFile != null) outFile << next + "\n"
        }
    }
}
